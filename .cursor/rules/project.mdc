---
description: Insurance Policy System - Project-specific rules and requirements
globs: **/*.py, **/*.csv, **/*.md
---

# Insurance Policy System - Project Rules

## System Overview
This project simulates an insurance policy system with a family-centric approach using driver-vehicle assignments. The system creates ~1,200 inforce policies by end of 2018 and simulates 7+ years of data with realistic family compositions and driver assignment rules.

### Current Status (Latest Updates)
- ✅ **Policy numbering is sequential by creation date** - earliest policies (January 2018) have lowest policy numbers
- ✅ **Inforce represents end-of-month status** - policies appear from their start date onwards  
- ✅ **Historical assignment tracking** - proper handling of vehicle substitutions and coverage gaps
- ✅ **Family-centric data architecture** - families drive policy composition and driver assignments
- ✅ **Configurable family types** - easy switching between single person, couples, and families with teens
- ✅ **Realistic vehicle change rates** - scaled back additions to maintain realistic multi-vehicle percentages
- ✅ **PySpark Integration** - Full PySpark-based data processing and analysis pipeline with Java 17 support
- ✅ **Major Change Detection** - Automated detection of vehicle/driver changes using PySpark DataFrames
- ✅ **Dynamic Client Tenure** - Client tenure calculated dynamically at each report build date
- ✅ **Enhanced Reporting** - Comprehensive PySpark-based distribution analysis and data profiling
- ✅ **Git Repository Management** - Proper .gitignore excluding generated CSV files and data directories
- ✅ **Corrected Driver Assignment Logic** - Fixed vehicle substitution logic to use proper assignment rules

## Environment Requirements
- **Conda Environment**: Always use the `retention` conda environment
- **Activation**: Run `conda activate retention` before executing any Python scripts
- **Dependencies**: All Python packages should be installed in the retention environment, not globally
- **Java 17**: Required for PySpark 4.0.1 compatibility
- **PySpark**: Installed via pip in the retention environment

## Data Architecture

### Core Data Files (Internal)
- `families_master.csv` - Family composition and rules data
- `policies_master.csv` - Policy master data (references families)
- `vehicles_master.csv` - Vehicle master data with VINs and effective dates (references families)
- `drivers_master.csv` - Driver master data with license numbers and birthdays (references families)
- `driver_vehicle_assignments.csv` - Driver-vehicle assignments with exposure factors
- `policy_changes_log.csv` - Transaction log of all changes

### Output Files (Final Products)
- `inforce_monthly_view.csv` - Monthly snapshot with driver-vehicle assignment records (end-of-month status)
- `inforce_monthly_view_sorted/` - PySpark-generated sorted DataFrame for viewing with editors
- `monthly_distribution_summary.csv/` - PySpark-based monthly statistics with major change indicators
- `monthly_profiling_summary.csv/` - PySpark-based data profiling report
- `vehicle_type_profiling.csv/` - PySpark-based vehicle type analysis
- `driver_type_profiling.csv/` - PySpark-based driver type analysis

### New PySpark Features
- **Major Change Detection**: Automated identification of vehicle/driver changes applied to PySpark DataFrame
- **Dynamic Client Tenure**: Calculated as (current_date - policy_start_date).days at report build time
- **Enhanced Distribution Analysis**: Vehicle, driver, temporal, and premium distributions using PySpark
- **Data Profiling**: Comprehensive data quality assessment and business metrics
- **Sorted DataFrame Output**: Policy-sorted DataFrame for viewing with text editors

## Family-Centric System Architecture

### Family Types (Configurable)
- **Single Person**: 1 adult, 0 teens, 1+ vehicles
- **Couple**: 2 adults, 0 teens, 1-2 vehicles  
- **Family with Teens**: 2 adults, 1-2 teens, 1-3 vehicles

### Driver Assignment Rules
**✅ CORRECTED AND IMPLEMENTED: See `.cursor/rules/driver_assignment.mdc` for detailed business logic**

**CORRECTED RULES (NOW IMPLEMENTED):**
- **Each vehicle gets exactly one driver** (default - no secondary assignments)
- **Secondary assignments only when**: teen driver present (≤24) OR more drivers than vehicles
- **Multiple vehicle assignments only when**: more vehicles than drivers
- **Every driver must be assigned to at least 1 vehicle**
- **No unassigned drivers or vehicles**
- **Vehicle substitution logic**: Now uses corrected assignment rules in `apply_changes_proper.py`

**FIXED ISSUES:**
- ✅ **Vehicle substitution bug**: Fixed incorrect assignment logic during vehicle substitutions
- ✅ **Major change detection**: Now correctly identifies logical vs illogical assignment changes
- ✅ **Assignment consistency**: All assignment logic now follows the same corrected rules

### Exposure Allocation
- **Primary solo**: 1.0 exposure
- **Primary shared**: 0.6 exposure (when secondary present)
- **Secondary adult**: 0.5 exposure
- **Teen secondary**: 0.35 exposure
- **Teen primary**: 1.0 exposure
- **Unassigned driver**: 0.0 exposure

## Data Requirements

### Family Data
- Family IDs: 'FAM000001' format (6 digits), incrementing
- Family types: Configurable via YAML (single_person, couple, family_with_teens)
- Family evolution rules: Configurable per family type (can_add_adults, can_add_teens, etc.)
- Vehicle change rules: Configurable per family type (can_add_vehicles, max_vehicles, etc.)

### Policy Data
- Policy numbers: '00000001' format (8 digits), incrementing, same number on renewal
- Starting with ~1,200 inforce policies by end of 2018
- Annual renewals with varying expiry dates (uniformly distributed)
- Premium calculation based on driver-vehicle assignments and exposure factors
- Policy cancellations: families move to new insurers (permanent cancellation)
- New policy additions: families switch from other insurers to our company

### Vehicle Data
- Vehicle numbers: '01' format, per-family indexing
- 17-character unique VINs
- Model years: 2001-2018 for initial vehicles (17-year max age)
- Vehicle type complexity: 10 different vehicle types
- Vehicle changes: additions, removals, substitutions (configurable per family type)

### Driver Data
- Driver numbers: '01' format, per-family indexing
- Ontario-style driver license numbers (4 letters, 3 numbers, 2 letters)
- Driver types: adult, teen (simplified from primary/spouse/secondary)
- Driver names: Random unique names from configurable lists
- Driver additions: kids turning 16, new family members
- Driver removals: kids turning 25, family changes
- Track birthdays for age-based changes and aging calculations

### Driver-Vehicle Assignment Data
- Assignment IDs: 'ASS00000001' format (8 digits), incrementing
- Assignment types: primary, secondary_adult, secondary_teen, unassigned
- Exposure factors: Based on assignment type and sharing rules
- Effective dates: When assignments become active
- Status tracking: active, inactive, etc.

### Inforce View Structure
Required fields:
- `inforce_yy` - Year (4 digits)
- `inforce_mm` - Month (1-12)
- `policy` - Policy number
- `policy_expiry_date` - Policy expiry date
- `client_tenure_days` - Dynamic client tenure (calculated at report build time)
- `vehicle_no` - Vehicle number
- `vehicle_vin` - Vehicle VIN
- `vehicle_type` - Vehicle type
- `model_year` - Vehicle model year
- `driver_no` - Driver number
- `driver_license_no` - Driver license number
- `driver_name` - Driver name
- `driver_type` - Driver type
- `assignment_type` - Driver-vehicle assignment type
- `exposure_factor` - Exposure allocation factor
- `driver_age` - Driver age
- `premium_paid` - Premium amount
- `major_change` - Major change flag (added by PySpark analysis)

**Sorting Requirements:**
The inforce view must be sorted by: policy, policy_expiry_date, vehicle_no, driver_no, inforce_yy, inforce_mm

## Python Routines Required

### Core Pipeline (main.py)
1. **`build_initial_state()`** - Creates families with initial vehicles/drivers and assignments
2. **`apply_monthly_changes()`** - Simulates monthly changes respecting family type rules  
3. **`generate_inforce_view()`** - Builds final monthly inforce CSV and creates PySpark DataFrame
4. **`distribution_analysis()`** - PySpark-based analysis with pandas fallback

### PySpark Pipeline Components
- **PySpark DataFrame Creation**: Load CSV into PySpark with schema validation
- **Major Change Detection**: Applied to PySpark DataFrame before analysis
- **Distribution Analysis**: Vehicle, driver, temporal, and premium distributions
- **Data Profiling**: Comprehensive data quality and business metrics reporting
- **Sorted DataFrame Output**: Policy-sorted output for viewing with text editors

### Key Implementation Details
- **Dynamic Client Tenure**: `tenure_days = (current_date - policy_start_date).days`
- **Major Change Logic**: Vehicle changes, driver changes, significant age changes
- **Premium Calculations**: Include vehicle type, driver age, and driver type factors
- **Annual Inflation**: 5% premium increases applied each January

## Family Type Configuration

### Configuration Management
- **YAML-based configuration**: All family types and rules in `config/policy_system_config.yaml`
- **Preset system**: Quick switching between family type combinations
- **Maintenance utilities**: `src/maintain/family_type_manager.py` for configuration management

### Available Presets
- **Single person only**: All families are single person (simple mode)
- **Mixed families**: Realistic mix of single person, couples, families with teens
- **Couples only**: All families are couples
- **Families with teens only**: All families have teens

### Family Evolution Rules (Per Family Type)
- `can_add_adults`: Whether families can add adults (marriage, coupling)
- `can_add_teens`: Whether families can add teens (kids turning 16)
- `can_remove_adults`: Whether families can remove adults (divorce, separation)
- `can_remove_teens`: Whether families can remove teens (aging out, moving out)
- `can_add_vehicles`: Whether families can add vehicles
- `can_remove_vehicles`: Whether families can remove vehicles
- `can_substitute_vehicles`: Whether families can substitute vehicles
- `max_vehicles`: Maximum vehicles allowed for this family type

## Policy Lifecycle Management

### Policy Cancellations
- Permanent cancellations when families move to new insurers
- Cancellation reasons: better rates elsewhere, service issues, relocation
- Cancellation timing: can occur at any point in policy year

### New Policy Additions
- New policies from families switching from competitors
- Addition reasons: better rates, better service, referrals
- New policy timing: can start at any point in the year
- Policy numbering: continues incrementing from highest existing policy number

### Net Policy Flow
- Starting point: ~1,200 inforce policies by end of 2018
- Natural drift: policy count will fluctuate based on market forces
- Variability: some months have net gains, others net losses
- No artificial constraints: let the data tell the story of market dynamics

## Data Quality Standards
- All changes must be inferable from inforce view (no explicit change tracking in output)
- Realistic family compositions and driver-vehicle assignments
- Consistent change patterns throughout the 7+ year period
- Proper date handling and policy lifecycle management
- Driver-vehicle assignments follow insurance industry standards

## File Organization
- All data files in `data/policy_system/` directory
- Python modules in `src/create/` directory
- Maintenance utilities in `src/maintain/` directory
- Inforce data in `data/inforce/` directory
- Output files in `output/` directory
- Configuration files in `config/` directory

## Configuration Management
- **Main config**: `config/policy_system_config.yaml` - Main system configuration
- **Presets**: `config/family_type_presets.yaml` - Family type preset configurations
- **Manager**: `src/maintain/family_type_manager.py` - Configuration management utilities

## Output File Management
- **Fixed naming convention**: Use consistent, descriptive names for all output files
- **No temporary files**: All generated files should have permanent, meaningful names
- **Reusable reports**: Use the same file names for iterative analysis to avoid clutter
- **Clean output directory**: Remove temporary or test files after validation
- **Standard report names**:
  - `monthly_distribution_summary.csv/` - Monthly inforce statistics with major change indicators
  - `inforce_monthly_view.csv` - Complete monthly inforce data

## Usage Examples

### Switching Family Types
```bash
# Show current configuration
python -m src.maintain.family_type_manager

# Switch to single person only
python -m src.maintain.family_type_manager single_person_only

# Switch to mixed families
python -m src.maintain.family_type_manager mixed_families
```

### Running the System
```bash
# Activate environment
conda activate retention

# Run complete system
python main.py

# Run individual steps
python -c "from src.create.build_initial_state import create_initial_state; create_initial_state()"
```